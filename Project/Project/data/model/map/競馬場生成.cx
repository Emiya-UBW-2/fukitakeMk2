<?xml version="1.0"?>
<CSScriptData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmx;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>
// using項目はメニューから一括管理(ここへの直接追記でも動作可能)

// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass
{

	public IPEPluginHost host;
	public IPEBuilder builder;
	public IPEShortBuilder bd;		// 短絡系ビルダ
	public IPXPmxBuilder bdx;		// PMXビルダ
	public IPEConnector connect;
	public IPEPMDViewConnector view;

	// PMX関連

	public IPXPmx pmx;    	 	// PMX取得
	public IPXHeader header;	// header   :ヘッダ
	public IPXModelInfo info;   // info     :モデル情報
	public IList&lt;IPXVertex&gt; vertex; // vertex   :頂点   | リスト
	public IList&lt;IPXMaterial&gt; material; // material :材質   | リスト
	public IList&lt;IPXBone&gt; bone;         // bone     :ボーン | リスト
	public IList&lt;IPXMorph&gt; morph;		// morph    :モーフ | リスト
	public IList&lt;IPXNode&gt; node;			// node     :表示枠 | リスト
	public IList&lt;IPXBody&gt; body;         // body     :剛体   | リスト
	public IList&lt;IPXJoint&gt; joint;       // joint    :Joint  | リスト

    // コンストラクタ
    public CSScriptClass() : base()
    {
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "CSScript生成プラグイン");
    }

    // エントリポイント
    public override void Run(IPERunArgs args)
    {
        try {
            // ここへ処理を追加してください.
            //
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
this.host = args.Host;
this.builder = this.host.Builder;
this.bd = this.host.Builder.SC;		// 短絡系ビルダ
this.bdx = this.host.Builder.Pmx;		// PMXビルダ
this.connect = this.host.Connector;
this.view = this.host.Connector.View.PMDView;

// PMX関連

this.pmx = this.connect.Pmx.GetCurrentState();     // PMX取得
this.header = this.pmx.Header;                  // header   :ヘッダ
this.info = this.pmx.ModelInfo;              // info     :モデル情報
this.vertex = this.pmx.Vertex;           // vertex   :頂点   | リスト
this.material = this.pmx.Material;     // material :材質   | リスト
this.bone = this.pmx.Bone;                 // bone     :ボーン | リスト
this.morph = this.pmx.Morph;				// morph    :モーフ | リスト
this.node = this.pmx.Node;					// node     :表示枠 | リスト
this.body = this.pmx.Body;                 // body     :剛体   | リスト
this.joint = this.pmx.Joint;              // joint    :Joint  | リスト
/////////////////////////////////////////////////////////////////////////////


const float gwidth=1000;
const float gheight=1000;
const float cwidth=264.3f; // m単位
const float cheight=305.1f; // m単位
float ratio=1.0f; //倍率
float uvratio=10; // xz座標をuv座標に直す時の倍率
float fenceheight=1; //埒の高さ
float fencethickness=0.2f; // 埒の厚み
float poleinterval=2.4f; // 埒の柱間隔（多分１馬身=2.4m）
int cdiv=200;

pmx.Clear();

IList&lt;IPXFace&gt; FL=new List&lt;IPXFace&gt;();


IPXMaterial grass=bdx.Material();
material.Add(grass);
grass.Name="芝";
grass.Diffuse=new V4 (1,1,1,1);
grass.Specular=new V3(0.2f,0.2f,0.2f);
grass.Ambient=new V3(0,0,0);
grass.Tex="草.png";

IPXMaterial fence=bdx.Material();
material.Add(fence);
fence.Name="埒";
fence.Diffuse=new V4 (1,1,1,1);
fence.Specular=new V3(0.2f,0.2f,0.2f);
fence.Ambient=new V3(0,0,0);

IPXVertex gxz=bdx.Vertex();
gxz.Normal= new V3(0,1,0);
gxz.Bone1=bone[0];
gxz.Weight1=1;
gxz.EdgeScale=1;

IPXVertex g_xz=(IPXVertex)gxz.Clone();
IPXVertex g_x_z=(IPXVertex)gxz.Clone();
IPXVertex gx_z=(IPXVertex)gxz.Clone();

gxz.Position=new V3(gwidth/2,-0.1f,gheight/2);
g_xz.Position=new V3(-gwidth/2,-0.1f,gheight/2);
g_x_z.Position=new V3(-gwidth/2,-0.1f,-gheight/2);
gx_z.Position=new V3(gwidth/2,-0.1f,-gheight/2);

grass.Faces.Add(NewFace(gxz,gx_z,g_xz));
grass.Faces.Add(NewFace(g_x_z,g_xz,gx_z));

vertex.Add(gxz);
vertex.Add(g_xz);
vertex.Add(g_x_z);
vertex.Add(gx_z);


IPXVertex vxz=bdx.Vertex();
vxz.Normal=new V3(0,1,0);
vxz.Bone1=bone[0];
vxz.Weight1=1;
vxz.EdgeScale=1;

IPXVertex v_xz=(IPXVertex)vxz.Clone();
IPXVertex v_x_z=(IPXVertex)vxz.Clone();
IPXVertex vx_z=(IPXVertex)vxz.Clone();

vxz.Position=new V3(cwidth/2,0,cheight/2);
v_xz.Position=new V3(-cwidth/2,0,cheight/2);
v_x_z.Position=new V3(-cwidth/2,0,-cheight/2);
vx_z.Position=new V3(cwidth/2,0,-cheight/2);


int wdiv=111;

for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	v_xz.Position +new V3(	poleinterval*i,0,-fencethickness/2),
								new V3(0,0,-1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	v_x_z.Position +new V3(	poleinterval*i,0,fencethickness/4),
								new V3( 0,0,1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

vertex.Add(vxz);
vertex.Add(v_xz);
vertex.Add(v_x_z);
vertex.Add(vx_z);

grass.Faces.Add(NewFace(vxz,vx_z,v_xz));
grass.Faces.Add(NewFace(v_x_z,v_xz,vx_z));

IPXVertex v1=vxz;
IPXVertex v2;
IPXVertex cr=(IPXVertex)v1.Clone(); cr.Position=new V3(cwidth/2,0,0);
vertex.Add(cr);
IPXVertex r1t=(IPXVertex)v1.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
IPXVertex r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
IPXVertex r1ti=(IPXVertex)v1.Clone();
r1ti.Position.Y+=fenceheight;
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
IPXVertex r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);
IPXVertex r2t,r2b;
IPXVertex r2ti,r2bi;
IPXVertex fst,fsb,fsti,fsbi;
IPXVertex lst,lsb,lsti,lsbi;
fst=r1t; fsb=r1b; fsti=r1ti; fsbi=r1bi;
for(int i=1;i&lt;=cdiv;i++){
	v2=(IPXVertex)v1.Clone();
	vertex.Add(v2);
	v2.Position=new V3(	(float)(cheight/2*Math.Sin(Math.PI/cdiv*i))+cwidth/2,
							0,
						(float)(Math.Cos(Math.PI/cdiv*i)*cheight/2)   );
	grass.Faces.Add(NewFace(cr,v1,v2));
	v1=v2;

	r2t=(IPXVertex)v2.Clone();
	r2t.Position.Y=fenceheight;
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness)/2*Math.Cos(Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2b,r2t,r1t));
	fence.Faces.Add(NewFace(r1b,r2b,r1t));
	fence.Faces.Add(NewFace(r2ti,r2bi,r1ti));
	fence.Faces.Add(NewFace(r1ti,r2bi,r1bi));
	fence.Faces.Add(NewFace(r2t,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1ti,r1t,r2t));
	fence.Faces.Add(NewFace(r2bi,r2b,r1bi));
	fence.Faces.Add(NewFace(r1b,r1bi,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}
lst=r1t; lsti=r1ti; lsb=r1b; lsbi=r1bi;

v1=v_xz;
IPXVertex cl=(IPXVertex)v1.Clone();cl.Position=new V3(-cwidth/2,0,0);
vertex.Add(cl);
r1t=(IPXVertex)v1.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
IPXVertex rt=r1t;
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)v1.Clone();
r1ti.Position.Y+=fenceheight;
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);

fence.Faces.Add(NewFace(fsti,r1t,fst));
fence.Faces.Add(NewFace(r1ti,r1t,fsti));
fence.Faces.Add(NewFace(r1t,r1b,fst));
fence.Faces.Add(NewFace(r1b,fsb,fst));
fence.Faces.Add(NewFace(fsti,fsbi,r1ti));
fence.Faces.Add(NewFace(fsbi,r1bi,r1ti));
fence.Faces.Add(NewFace(fsbi,fsb,r1b));
fence.Faces.Add(NewFace(r1b,r1bi,fsbi));


for(int i=1;i&lt;=cdiv;i++){
	v2=(IPXVertex)v1.Clone();
	vertex.Add(v2);
	v2.Position=new V3((float)(cheight/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),0,(float)(Math.Cos(-Math.PI/cdiv*i)*cheight/2));
	grass.Faces.Add(NewFace(cl,v2,v1));

	v1=v2;
	r2t=(IPXVertex)v2.Clone();
	r2t.Position.Y=fenceheight;
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness)/2*Math.Cos(-Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2t,r2b,r1t));
	fence.Faces.Add(NewFace(r1t,r2b,r1b));
	fence.Faces.Add(NewFace(r2bi,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1bi,r2bi,r1ti));
	fence.Faces.Add(NewFace(r2ti,r2t,r1ti));
	fence.Faces.Add(NewFace(r1t,r1ti,r2t));
	fence.Faces.Add(NewFace(r2b,r2bi,r1bi));
	fence.Faces.Add(NewFace(r1bi,r1b,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;

}


for(int i=1;i&lt;cdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2)/2*Math.Sin(Math.PI/cdiv*i))+cwidth/2,
										0,
										(float)(Math.Cos(Math.PI/cdiv*i)*(cheight-fencethickness/2)/2)),
								-new V3(	(float)(cheight/2*Math.Sin(Math.PI/cdiv*i)),
										0,
										(float)(Math.Cos(Math.PI/cdiv*i)*cheight/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

for(int i=1;i&lt;cdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2)/2*Math.Sin(-Math.PI/cdiv*i))-cwidth/2,
										0,
										(float)(Math.Cos(-Math.PI/cdiv*i)*(cheight-fencethickness/2)/2)),
								-new V3(	(float)(cheight/2*Math.Sin(-Math.PI/cdiv*i)),
										0,
										(float)(Math.Cos(-Math.PI/cdiv*i)*cheight/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


fence.Faces.Add(NewFace(lsti,lst,r1t));
fence.Faces.Add(NewFace(r1ti,lsti,r1t));
fence.Faces.Add(NewFace(r1t,lst,r1b));
fence.Faces.Add(NewFace(r1b,lst,lsb));
fence.Faces.Add(NewFace(lsti,r1ti,lsbi));
fence.Faces.Add(NewFace(lsbi,r1ti,r1bi));
fence.Faces.Add(NewFace(lsbi,r1b,lsb));
fence.Faces.Add(NewFace(r1b,lsbi,r1bi));


IPXMaterial dirt=bdx.Material();
material.Add(dirt);
dirt.Name="ダート";
dirt.Diffuse=new V4 (1,1,1,1);
dirt.Specular=new V3(0.2f,0.2f,0.2f);
dirt.Ambient=new V3(0,0,0);
dirt.Tex="土.jpg";

float dwidth=20*2;
IPXVertex dvxz=(IPXVertex) vxz.Clone();
IPXVertex dv_xz=(IPXVertex) vxz.Clone();
IPXVertex dv_x_z=(IPXVertex) vxz.Clone();
IPXVertex dvx_z=(IPXVertex) vxz.Clone();

dvxz.Position=new V3(cwidth/2,0,(cheight+dwidth)/2);
dv_xz.Position=new V3(-cwidth/2,0,(cheight+dwidth)/2);
dv_x_z.Position=new V3(-cwidth/2,0,-(cheight+dwidth)/2);
dvx_z.Position=new V3(cwidth/2,0,-(cheight+dwidth)/2);

vertex.Add(dvxz);
vertex.Add(dv_xz);
vertex.Add(dv_x_z);
vertex.Add(dvx_z);

dirt.Faces.Add(NewFace(dvxz,vxz,dv_xz));
dirt.Faces.Add(NewFace(v_xz,dv_xz,vxz));
dirt.Faces.Add(NewFace(dv_x_z,v_x_z,dvx_z));
dirt.Faces.Add(NewFace(dvx_z,v_x_z,vx_z));

IPXVertex dv1=(IPXVertex)dvxz.Clone(); vertex.Add(dv1);
IPXVertex dv2;
v1=vxz;
r1t=(IPXVertex)dv1.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)dv1.Clone();
r1ti.Position.Y+=fenceheight;
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);
fst=r1t; fsb=r1b; fsti=r1ti; fsbi=r1bi;
for(int i=1;i&lt;cdiv+1;i++){
	dv2=(IPXVertex)dv1.Clone();
	dv2.Position=new V3(  (float)((cheight+dwidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							0,
						  (float)(Math.Cos(Math.PI/cdiv*i)*(cheight+dwidth)/2) );
	vertex.Add(dv2);
	v2=(IPXVertex)v1.Clone();  
	v2.Position=new V3(  (float)(cheight/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							0,
						 (float)(Math.Cos(Math.PI/cdiv*i)*cheight/2) );
	vertex.Add(v2);

	dirt.Faces.Add(NewFace(dv1,dv2,v1));
	dirt.Faces.Add(NewFace(v2,v1,dv2));
	dv1=dv2;
	v1=v2;

	r2t=(IPXVertex)dv2.Clone();
	r2t.Position.Y=fenceheight;
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+dwidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+dwidth)/2*Math.Cos(Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2b,r2t,r1t));
	fence.Faces.Add(NewFace(r1b,r2b,r1t));
	fence.Faces.Add(NewFace(r2ti,r2bi,r1ti));
	fence.Faces.Add(NewFace(r1ti,r2bi,r1bi));
	fence.Faces.Add(NewFace(r2t,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1ti,r1t,r2t));
	fence.Faces.Add(NewFace(r2bi,r2b,r1bi));
	fence.Faces.Add(NewFace(r1b,r1bi,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}


lst=r1t; lsti=r1ti; lsb=r1b; lsbi=r1bi;

dv1=(IPXVertex)dv_xz.Clone(); vertex.Add(dv1);
v1=v_xz;
r1t=(IPXVertex)dv1.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)dv1.Clone();
r1ti.Position.Y+=fenceheight;
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);


int ddiv=213;

for(int i=1;i&lt;ddiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+dwidth)/2*Math.Sin(Math.PI/ddiv*i))+cwidth/2,
										0,
										(float)(Math.Cos(Math.PI/ddiv*i)*(cheight-fencethickness/2+dwidth)/2)),
								new V3(	(float)((cheight+dwidth)/2*Math.Sin(Math.PI/ddiv*i)),
										0,
										(float)(Math.Cos(Math.PI/ddiv*i)*(cheight+dwidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

for(int i=1;i&lt;ddiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+dwidth)/2*Math.Sin(-Math.PI/ddiv*i))-cwidth/2,
										0,
										(float)(Math.Cos(-Math.PI/ddiv*i)*(cheight-fencethickness/2+dwidth)/2)),
								new V3(	(float)((cheight+dwidth)/2*Math.Sin(-Math.PI/ddiv*i)),
										0,
										(float)(Math.Cos(-Math.PI/ddiv*i)*(cheight+dwidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	dv_xz.Position +new V3(	poleinterval*i,0,-fencethickness/2),
								new V3( 0,0,1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	dv_x_z.Position +new V3(	poleinterval*i,0,fencethickness/4),
								new V3( 0,0,-1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


fence.Faces.Add(NewFace(fsti,r1t,fst));
fence.Faces.Add(NewFace(r1ti,r1t,fsti));
fence.Faces.Add(NewFace(r1t,r1b,fst));
fence.Faces.Add(NewFace(r1b,fsb,fst));
fence.Faces.Add(NewFace(fsti,fsbi,r1ti));
fence.Faces.Add(NewFace(fsbi,r1bi,r1ti));
fence.Faces.Add(NewFace(fsbi,fsb,r1b));
fence.Faces.Add(NewFace(r1b,r1bi,fsbi));


for(int i=1;i&lt;cdiv+1;i++){
	dv2=(IPXVertex)dv1.Clone();
	dv2.Position=new V3(  (float)((cheight+dwidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							0,
						  (float)(Math.Cos(-Math.PI/cdiv*i)*(cheight+dwidth)/2) );
	vertex.Add(dv2);
	v2=(IPXVertex)v1.Clone();  
	v2.Position=new V3(  (float)(cheight/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							0,
						 (float)(Math.Cos(-Math.PI/cdiv*i)*cheight/2) );
	vertex.Add(v2);

	dirt.Faces.Add(NewFace(v1,dv2,dv1));
	dirt.Faces.Add(NewFace(dv2,v1,v2));
	dv1=dv2;
	v1=v2;


	r2t=(IPXVertex)dv2.Clone();
	r2t.Position.Y=fenceheight;
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+dwidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+dwidth)/2*Math.Cos(-Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2t,r2b,r1t));
	fence.Faces.Add(NewFace(r1t,r2b,r1b));
	fence.Faces.Add(NewFace(r2bi,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1bi,r2bi,r1ti));
	fence.Faces.Add(NewFace(r2ti,r2t,r1ti));
	fence.Faces.Add(NewFace(r1t,r1ti,r2t));
	fence.Faces.Add(NewFace(r2b,r2bi,r1bi));
	fence.Faces.Add(NewFace(r1bi,r1b,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}

fence.Faces.Add(NewFace(lsti,lst,r1t));
fence.Faces.Add(NewFace(r1ti,lsti,r1t));
fence.Faces.Add(NewFace(r1t,lst,r1b));
fence.Faces.Add(NewFace(r1b,lst,lsb));
fence.Faces.Add(NewFace(lsti,r1ti,lsbi));
fence.Faces.Add(NewFace(lsbi,r1ti,r1bi));
fence.Faces.Add(NewFace(lsbi,r1b,lsb));
fence.Faces.Add(NewFace(r1b,lsbi,r1bi));


float mwidth=3*2;


for(int i=1;i&lt;ddiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+dwidth+mwidth)/2*Math.Sin(Math.PI/ddiv*i))+cwidth/2,
										0,
										(float)(Math.Cos(Math.PI/ddiv*i)*(cheight-fencethickness/2+dwidth+mwidth)/2)),
								-new V3(	(float)((cheight+dwidth+mwidth)/2*Math.Sin(Math.PI/ddiv*i)),
										0,
										(float)(Math.Cos(Math.PI/ddiv*i)*(cheight+dwidth+mwidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

for(int i=1;i&lt;ddiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+dwidth+mwidth)/2*Math.Sin(-Math.PI/ddiv*i))-cwidth/2,
										0,
										(float)(Math.Cos(-Math.PI/ddiv*i)*(cheight-fencethickness/2+dwidth+mwidth)/2)),
								-new V3(	(float)((cheight+dwidth+mwidth)/2*Math.Sin(-Math.PI/ddiv*i)),
										0,
										(float)(Math.Cos(-Math.PI/ddiv*i)*(cheight+dwidth+mwidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}



for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	dv_xz.Position +new V3(	poleinterval*i,0,mwidth/2-fencethickness/2),
								new V3( 0,0,-1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	dv_x_z.Position +new V3(	poleinterval*i,0,-mwidth/2+fencethickness/4),
								new V3( 0,0,1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}
r1t=(IPXVertex)dvxz.Clone();
r1t.Position.Y+=fenceheight;
r1t.Position.Z+=mwidth/2;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)r1t.Clone();
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);
fst=r1t; fsb=r1b; fsti=r1ti; fsbi=r1bi;
for(int i=1;i&lt;cdiv+1;i++){
	r2t=(IPXVertex)r1t.Clone();
	r2t.Position=new V3(  (float)((cheight+dwidth+mwidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
						  (float)(Math.Cos(Math.PI/cdiv*i)*(cheight+dwidth+mwidth)/2) );
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+dwidth+mwidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+dwidth+mwidth)/2*Math.Cos(Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2b,r2t,r1t));
	fence.Faces.Add(NewFace(r1b,r2b,r1t));
	fence.Faces.Add(NewFace(r2ti,r2bi,r1ti));
	fence.Faces.Add(NewFace(r1ti,r2bi,r1bi));
	fence.Faces.Add(NewFace(r2t,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1ti,r1t,r2t));
	fence.Faces.Add(NewFace(r2bi,r2b,r1bi));
	fence.Faces.Add(NewFace(r1b,r1bi,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}


lst=r1t; lsti=r1ti; lsb=r1b; lsbi=r1bi;


r1t=(IPXVertex)dv_xz.Clone();
r1t.Position.Y+=fenceheight;
r1t.Position.Z+=mwidth/2;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)r1t.Clone();
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);

fence.Faces.Add(NewFace(fsti,r1t,fst));
fence.Faces.Add(NewFace(r1ti,r1t,fsti));
fence.Faces.Add(NewFace(r1t,r1b,fst));
fence.Faces.Add(NewFace(r1b,fsb,fst));
fence.Faces.Add(NewFace(fsti,fsbi,r1ti));
fence.Faces.Add(NewFace(fsbi,r1bi,r1ti));
fence.Faces.Add(NewFace(fsbi,fsb,r1b));
fence.Faces.Add(NewFace(r1b,r1bi,fsbi));



for(int i=1;i&lt;cdiv+1;i++){
	r2t=(IPXVertex)r1t.Clone();
	r2t.Position=new V3(  (float)((cheight+dwidth+mwidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
						  (float)(Math.Cos(-Math.PI/cdiv*i)*(cheight+dwidth+mwidth)/2) );
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+dwidth+mwidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+dwidth+mwidth)/2*Math.Cos(-Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2t,r2b,r1t));
	fence.Faces.Add(NewFace(r1t,r2b,r1b));
	fence.Faces.Add(NewFace(r2bi,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1bi,r2bi,r1ti));
	fence.Faces.Add(NewFace(r2ti,r2t,r1ti));
	fence.Faces.Add(NewFace(r1t,r1ti,r2t));
	fence.Faces.Add(NewFace(r2b,r2bi,r1bi));
	fence.Faces.Add(NewFace(r1bi,r1b,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}

fence.Faces.Add(NewFace(lsti,lst,r1t));
fence.Faces.Add(NewFace(r1ti,lsti,r1t));
fence.Faces.Add(NewFace(r1t,lst,r1b));
fence.Faces.Add(NewFace(r1b,lst,lsb));
fence.Faces.Add(NewFace(lsti,r1ti,lsbi));
fence.Faces.Add(NewFace(lsbi,r1ti,r1bi));
fence.Faces.Add(NewFace(lsbi,r1b,lsb));
fence.Faces.Add(NewFace(r1b,lsbi,r1bi));


float owidth=dwidth+30*2;
int odiv=232;

for(int i=1;i&lt;odiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+owidth)/2*Math.Sin(Math.PI/odiv*i))+cwidth/2,
										0,
										(float)(Math.Cos(Math.PI/odiv*i)*(cheight-fencethickness/2+owidth)/2)),
								new V3(	(float)((cheight+owidth)/2*Math.Sin(Math.PI/odiv*i)),
										0,
										(float)(Math.Cos(Math.PI/odiv*i)*(cheight+owidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

for(int i=1;i&lt;odiv;i++){

	IList&lt;IPXFace&gt; tmpfl=Pole(	new V3(	(float)((cheight-fencethickness/2+owidth)/2*Math.Sin(-Math.PI/odiv*i))-cwidth/2,
										0,
										(float)(Math.Cos(-Math.PI/odiv*i)*(cheight-fencethickness/2+owidth)/2)),
								new V3(	(float)((cheight+owidth)/2*Math.Sin(-Math.PI/odiv*i)),
										0,
										(float)(Math.Cos(-Math.PI/odiv*i)*(cheight+owidth)/2) ),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

IPXVertex ovxz=(IPXVertex) vxz.Clone();
IPXVertex ov_xz=(IPXVertex) vxz.Clone();
IPXVertex ov_x_z=(IPXVertex) vxz.Clone();
IPXVertex ovx_z=(IPXVertex) vxz.Clone();

ovxz.Position=new V3(cwidth/2,0,(cheight+owidth)/2);
ov_xz.Position=new V3(-cwidth/2,0,(cheight+owidth)/2);
ov_x_z.Position=new V3(-cwidth/2,0,-(cheight+owidth)/2);
ovx_z.Position=new V3(cwidth/2,0,-(cheight+owidth)/2);

vertex.Add(ovxz);
vertex.Add(ov_xz);
vertex.Add(ov_x_z);
vertex.Add(ovx_z);


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	ov_xz.Position +new V3(	poleinterval*i,0,-fencethickness/2),
								new V3( 0,0,1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}


for(int i=0;i&lt;wdiv;i++){
	IList&lt;IPXFace&gt; tmpfl=Pole(	ov_x_z.Position +new V3(	poleinterval*i,0,fencethickness/4),
								new V3( 0,0,-1),
								fenceheight, fencethickness/2);
	foreach(IPXFace f in tmpfl){
		FL.Add(f);
	}
}

grass.Faces.Add(NewFace(ovxz,dvxz,ov_xz));
grass.Faces.Add(NewFace(dv_xz,ov_xz,dvxz));
grass.Faces.Add(NewFace(ov_x_z,dv_x_z,ovx_z));
grass.Faces.Add(NewFace(ovx_z,dv_x_z,dvx_z));


IPXVertex ov1=(IPXVertex)ovxz.Clone(); vertex.Add(ov1);
IPXVertex ov2;
dv1=dvxz;
for(int i=1;i&lt;cdiv+1;i++){
	dv2=(IPXVertex)dv1.Clone();
	dv2.Position=new V3(  (float)((cheight+dwidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							0,
						  (float)(Math.Cos(Math.PI/cdiv*i)*(cheight+dwidth)/2) );
	vertex.Add(dv2);
	ov2=(IPXVertex)ov1.Clone();  
	ov2.Position=new V3(  (float)((cheight+owidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							0,
						 (float)(Math.Cos(Math.PI/cdiv*i)*(cheight+owidth)/2) );
	vertex.Add(ov2);

	grass.Faces.Add(NewFace(ov1,dv2,dv1));
	grass.Faces.Add(NewFace(dv2,ov1,ov2));
	dv1=dv2;
	ov1=ov2;
}


ov1=(IPXVertex)ov_xz.Clone(); vertex.Add(ov1);
dv1=dv_xz;
for(int i=1;i&lt;cdiv+1;i++){
	dv2=(IPXVertex)dv1.Clone();
	dv2.Position=new V3(  (float)((cheight+dwidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							0,
						  (float)(Math.Cos(-Math.PI/cdiv*i)*(cheight+dwidth)/2) );
	vertex.Add(dv2);
	ov2=(IPXVertex)v1.Clone();  
	ov2.Position=new V3(  (float)((cheight+owidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							0,
						 (float)(Math.Cos(-Math.PI/cdiv*i)*(cheight+owidth)/2) );
	vertex.Add(ov2);

	grass.Faces.Add(NewFace(dv1,ov2,ov1));
	grass.Faces.Add(NewFace(ov2,dv1,dv2));
	dv1=dv2;
	ov1=ov2;
}


r1t=(IPXVertex)ovxz.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)r1t.Clone();
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);
fst=r1t; fsb=r1b; fsti=r1ti; fsbi=r1bi;
for(int i=1;i&lt;cdiv+1;i++){
	r2t=(IPXVertex)r1t.Clone();
	r2t.Position=new V3(  (float)((cheight+owidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
						  (float)(Math.Cos(Math.PI/cdiv*i)*(cheight+owidth)/2) );
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+owidth)/2*Math.Sin(Math.PI/cdiv*i)+cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+owidth)/2*Math.Cos(Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2b,r2t,r1t));
	fence.Faces.Add(NewFace(r1b,r2b,r1t));
	fence.Faces.Add(NewFace(r2ti,r2bi,r1ti));
	fence.Faces.Add(NewFace(r1ti,r2bi,r1bi));
	fence.Faces.Add(NewFace(r2t,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1ti,r1t,r2t));
	fence.Faces.Add(NewFace(r2bi,r2b,r1bi));
	fence.Faces.Add(NewFace(r1b,r1bi,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}


lst=r1t; lsti=r1ti; lsb=r1b; lsbi=r1bi;


r1t=(IPXVertex)ov_xz.Clone();
r1t.Position.Y+=fenceheight;
vertex.Add(r1t);
r1b=(IPXVertex)r1t.Clone();
r1b.Position.Y-=fencethickness;
vertex.Add(r1b);
r1ti=(IPXVertex)r1t.Clone();
r1ti.Position.Z-=fencethickness;
vertex.Add(r1ti);
r1bi=(IPXVertex)r1ti.Clone();
r1bi.Position.Y-=fencethickness;
vertex.Add(r1bi);

fence.Faces.Add(NewFace(fsti,r1t,fst));
fence.Faces.Add(NewFace(r1ti,r1t,fsti));
fence.Faces.Add(NewFace(r1t,r1b,fst));
fence.Faces.Add(NewFace(r1b,fsb,fst));
fence.Faces.Add(NewFace(fsti,fsbi,r1ti));
fence.Faces.Add(NewFace(fsbi,r1bi,r1ti));
fence.Faces.Add(NewFace(fsbi,fsb,r1b));
fence.Faces.Add(NewFace(r1b,r1bi,fsbi));

for(int i=1;i&lt;cdiv+1;i++){
	r2t=(IPXVertex)r1t.Clone();
	r2t.Position=new V3(  (float)((cheight+owidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
						  (float)(Math.Cos(-Math.PI/cdiv*i)*(cheight+owidth)/2) );
	vertex.Add(r2t);

	r2b=(IPXVertex)r2t.Clone();
	r2b.Position.Y-=fencethickness;
	vertex.Add(r2b);

	r2ti=(IPXVertex)r2t.Clone();
	r2ti.Position=new V3(	(float)((cheight-fencethickness+owidth)/2*Math.Sin(-Math.PI/cdiv*i)-cwidth/2),
							fenceheight,
							(float)((cheight-fencethickness+owidth)/2*Math.Cos(-Math.PI/cdiv*i)) );
	vertex.Add(r2ti);
	r2bi=(IPXVertex)r2ti.Clone();
	r2bi.Position.Y-=fencethickness;
	vertex.Add(r2bi);

	fence.Faces.Add(NewFace(r2t,r2b,r1t));
	fence.Faces.Add(NewFace(r1t,r2b,r1b));
	fence.Faces.Add(NewFace(r2bi,r2ti,r1ti));
	fence.Faces.Add(NewFace(r1bi,r2bi,r1ti));
	fence.Faces.Add(NewFace(r2ti,r2t,r1ti));
	fence.Faces.Add(NewFace(r1t,r1ti,r2t));
	fence.Faces.Add(NewFace(r2b,r2bi,r1bi));
	fence.Faces.Add(NewFace(r1bi,r1b,r2b));

	r1t=r2t; r1b=r2b;
	r1ti=r2ti; r1bi=r2bi;
}

fence.Faces.Add(NewFace(lsti,lst,r1t));
fence.Faces.Add(NewFace(r1ti,lsti,r1t));
fence.Faces.Add(NewFace(r1t,lst,r1b));
fence.Faces.Add(NewFace(r1b,lst,lsb));
fence.Faces.Add(NewFace(lsti,r1ti,lsbi));
fence.Faces.Add(NewFace(lsbi,r1ti,r1bi));
fence.Faces.Add(NewFace(lsbi,r1b,lsb));
fence.Faces.Add(NewFace(r1b,lsbi,r1bi));

foreach(IPXFace f in FL){
	fence.Faces.Add(f);
}


foreach(IPXVertex v in vertex){
	v.Position*=ratio;
	v.UV=new V2(v.Position.X,v.Position.Z)*uvratio/ratio;
}

/////////////////////////////////////////////////////////////////////////////
//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();
        }
        catch (Exception ex) {
            MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
    }

	IList&lt;IPXFace&gt; Pole(V3 pos, V3 dir, float fenceheight, float fencethickness){
		dir/=dir.Length();
		V3 yoko=OuterProduct(dir,new V3(0,1,0)); yoko/=yoko.Length()/fencethickness*2;
		IPXVertex txz=bdx.Vertex();
		IList&lt;IPXFace&gt; ret=new List&lt;IPXFace&gt;();

		txz.Normal=new V3(0,1,0);
		txz.Bone1=bone[0];
		txz.Weight1=1;
		txz.EdgeScale=1;

		IPXVertex t_xz=(IPXVertex)txz.Clone();
		IPXVertex t_x_z=(IPXVertex)txz.Clone();
		IPXVertex tx_z=(IPXVertex)txz.Clone();

		txz.Position=pos+yoko+dir/2*fencethickness;
		t_xz.Position=pos-yoko+dir/2*fencethickness;
		t_x_z.Position=pos-yoko-dir/2*fencethickness;
		tx_z.Position=pos+yoko-dir/2*fencethickness;

		txz.Position.Y=fenceheight-fencethickness*2;
		t_xz.Position.Y=fenceheight-fencethickness*2;
		t_x_z.Position.Y=fenceheight-fencethickness*2;
		tx_z.Position.Y=fenceheight-fencethickness*2;

		IPXVertex bxz=(IPXVertex)txz.Clone();
		IPXVertex b_xz=(IPXVertex)t_xz.Clone();
		IPXVertex b_x_z=(IPXVertex)t_x_z.Clone();
		IPXVertex bx_z=(IPXVertex)tx_z.Clone();

		bxz.Position.Y=0;
		b_xz.Position.Y=0;
		b_x_z.Position.Y=0;
		bx_z.Position.Y=0;

		float d=0.2f;
		bxz.Position+=dir*d;
		b_xz.Position+=dir*d;
		b_x_z.Position+=dir*d;
		bx_z.Position+=dir*d;

		vertex.Add(txz);	vertex.Add(t_xz);	vertex.Add(t_x_z);	vertex.Add(tx_z);
		vertex.Add(bxz);	vertex.Add(b_xz);	vertex.Add(b_x_z);	vertex.Add(bx_z);

		ret.Add(NewFace(txz,t_xz,t_x_z));
		ret.Add(NewFace(t_x_z,tx_z,txz));

		ret.Add(NewFace(bxz,b_x_z,b_xz));
		ret.Add(NewFace(b_x_z,bxz,bx_z));

		ret.Add(NewFace(tx_z,bx_z,txz));
		ret.Add(NewFace(bxz,txz,bx_z));

		ret.Add(NewFace(t_xz,txz,bxz));
		ret.Add(NewFace(bxz,b_xz,t_xz));

		ret.Add(NewFace(t_xz,b_xz,t_x_z));
		ret.Add(NewFace(b_xz,b_x_z,t_x_z));

		ret.Add(NewFace(t_x_z,bx_z,tx_z));
		ret.Add(NewFace(t_x_z,b_x_z,bx_z));


		return ret;
	}
	
	IPXFace NewFace(IPXVertex u, IPXVertex v, IPXVertex w){
		IPXFace f=bdx.Face();
		f.Vertex1=u;
		f.Vertex2=v;
		f.Vertex3=w;
		return f;
	}

	float InnerProduct(V3 a, V3 b){
		return a.X*b.X + a.Y*b.Y + a.Z*b.Z;
	}

	V3 OuterProduct(V3 a, V3 b){
		return new V3(a.Y*b.Z-a.Z*b.Y, a.Z*b.X-a.X*b.Z, a.X*b.Y-a.Y*b.Z);
	}
}
</FullCodeText>
  <CodeText>
// Run()関数内の処理を記述
// 外部クラスの活用などは一般形式のスクリプトコードを使用してください.

// プラグイン変数は IPERunArgs args を通して取得可能
// コードに自動的に追加されるヘッダ／フッタはメニューから有効化／確認が可能(ヘッダは標準で有効設定)


</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPXPmxBuilder bdx = host.Builder.Pmx;		// PMXビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMX関連

IPXPmx pmx = connect.Pmx.GetCurrentState();     // PMX取得
IPXHeader header = pmx.Header;                  // header   :ヘッダ
IPXModelInfo info = pmx.ModelInfo;              // info     :モデル情報
IList&lt;IPXVertex&gt; vertex = pmx.Vertex;           // vertex   :頂点   | リスト
IList&lt;IPXMaterial&gt; material = pmx.Material;     // material :材質   | リスト
IList&lt;IPXBone&gt; bone = pmx.Bone;                 // bone     :ボーン | リスト
IList&lt;IPXMorph&gt; morph = pmx.Morph;				// morph    :モーフ | リスト
IList&lt;IPXNode&gt; node = pmx.Node;					// node     :表示枠 | リスト
IList&lt;IPXBody&gt; body = pmx.Body;                 // body     :剛体   | リスト
IList&lt;IPXJoint&gt; joint = pmx.Joint;              // joint    :Joint  | リスト


/*
// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト
*/

</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMX更新
connect.Pmx.Update(pmx);

/*
// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);
*/

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>true</EnableHeader>
  <EnableFooter>false</EnableFooter>
  <ActivePages>0</ActivePages>
</CSScriptData>